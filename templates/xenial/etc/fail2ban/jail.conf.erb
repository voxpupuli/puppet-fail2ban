#
# THIS FILE IS MANAGED BY PUPPET
# <%= file %>
#

#
# WARNING: heavily refactored in 0.9.0 release.  Please review and
#          customize settings for your setup.
#
# Changes:  in most of the cases you should not modify this
#           file, but provide customizations in jail.local file,
#           or separate .conf files under jail.d/ directory, e.g.:
#
# HOW TO ACTIVATE JAILS:
#
# YOU SHOULD NOT MODIFY THIS FILE.
#
# It will probably be overwritten or improved in a distribution update.
#
# Provide customizations in a jail.local file or a jail.d/customisation.local.
# For example to change the default bantime for all jails and to enable the
# ssh-iptables jail the following (uncommented) would appear in the .local file.
# See man 5 jail.conf for details.
#
# [DEFAULT]
# bantime = 3600
#
# [sshd]
# enabled = true
#
# See jail.conf(5) man page for more information



# Comments: use '#' for comment lines and ';' (following a space) for inline comments


[INCLUDES]

#before = paths-distro.conf
before = paths-debian.conf

# The DEFAULT allows a global definition of the options. They can be overridden
# in each jail afterwards.

[DEFAULT]

#
# MISCELLANEOUS OPTIONS
#

# "ignoreip" can be an IP address, a CIDR mask or a DNS host. Fail2ban will not
# ban a host which matches an address in this list. Several addresses can be
# defined using space separator.
ignoreip = <%= scope['::fail2ban::whitelist'].join(" ") %>

# External command that will take an tagged arguments to ignore, e.g. <ip>,
# and return true if the IP is to be ignored. False otherwise.
#
# ignorecommand = /path/to/command <ip>
ignorecommand =

# "bantime" is the number of seconds that a host is banned.
bantime  = <%= scope['::fail2ban::bantime'] %>

# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime  = 600

# "maxretry" is the number of failures before a host get banned.
maxretry = <%= scope['::fail2ban::maxretry'] %>

# "backend" specifies the backend used to get files modification.
# Available options are "pyinotify", "gamin", "polling", "systemd" and "auto".
# This option can be overridden in each jail as well.
#
# pyinotify: requires pyinotify (a file alteration monitor) to be installed.
#              If pyinotify is not installed, Fail2ban will use auto.
# gamin:     requires Gamin (a file alteration monitor) to be installed.
#              If Gamin is not installed, Fail2ban will use auto.
# polling:   uses a polling algorithm which does not require external libraries.
# systemd:   uses systemd python library to access the systemd journal.
#              Specifying "logpath" is not valid for this backend.
#              See "journalmatch" in the jails associated filter config
# auto:      will try to use the following backends, in order:
#              pyinotify, gamin, polling.
#
# Note: if systemd backend is choses as the default but you enable a jail
#       for which logs are present only in its own log files, specify some other
#       backend for that jail (e.g. polling) and provide empty value for
#       journalmatch. See https://github.com/fail2ban/fail2ban/issues/959#issuecomment-74901200
backend = auto

# "usedns" specifies if jails should trust hostnames in logs,
#   warn when DNS lookups are performed, or ignore all hostnames in logs
#
# yes:   if a hostname is encountered, a DNS lookup will be performed.
# warn:  if a hostname is encountered, a DNS lookup will be performed,
#        but it will be logged as a warning.
# no:    if a hostname is encountered, will not be used for banning,
#        but it will be logged as info.
usedns = warn

# "logencoding" specifies the encoding of the log files handled by the jail
#   This is used to decode the lines from the log file.
#   Typical examples:  "ascii", "utf-8"
#
#   auto:   will use the system locale setting
logencoding = auto

# "enabled" enables the jails.
#  By default all jails are disabled, and it should stay this way.
#  Enable only relevant to your setup jails in your .local or jail.d/*.conf
#
# true:  jail will be enabled and log files will get monitored for changes
# false: jail is not enabled
enabled = false


# "filter" defines the filter to use by the jail.
#  By default jails have names matching their filter name
#
filter = %(__name__)s


#
# ACTIONS
#

# Some options used for actions

# Destination email address used solely for the interpolations in
# jail.{conf,local,d/*} configuration files.
destemail = <%= scope['::fail2ban::email'] %>

# Sender email address used solely for some actions
sender = <%= scope['::fail2ban::sender'] %>

# E-mail action. Since 0.8.1 Fail2Ban uses sendmail MTA for the
# mailing. Change mta configuration parameter to mail if you want to
# revert to conventional 'mail'.
mta = sendmail

# Default protocol
protocol = tcp

# Specify chain where jumps would need to be added in iptables-* actions
chain = <%= scope['::fail2ban::iptables_chain'] %>

# Ports to be banned
# Usually should be overridden in a particular jail
port = 0:65535

#
# Action shortcuts. To be used to define action parameter

# Default banning action (e.g. iptables, iptables-new,
# iptables-multiport, shorewall, etc) It is used to define
# action_* variables. Can be overridden globally or per
# section within jail.local file
banaction = <%= scope['::fail2ban::banaction'] %>

# The simplest action to take: ban only
action_ = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]

# ban & send an e-mail with buffered report to the destemail.
action_mb = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
            %(mta)s-buffered[name=%(__name__)s, dest="%(destemail)s", protocol="%(protocol)s", chain="%(chain)s"]

# ban & send an e-mail with whois report to the destemail.
action_mw = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
            %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s", protocol="%(protocol)s", chain="%(chain)s"]

# ban & send an e-mail with whois report and relevant log lines
# to the destemail.
action_mwl = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             %(mta)s-whois-lines[name=%(__name__)s, dest="%(destemail)s", logpath=%(logpath)s, chain="%(chain)s"]

# See the IMPORTANT note in action.d/xarf-login-attack for when to use this action
#
# ban & send a xarf e-mail to abuse contact of IP address and include relevant log lines
# to the destemail.
action_xarf = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             xarf-login-attack[service=%(__name__)s, sender="%(sender)s", logpath=%(logpath)s, port="%(port)s"]

# ban IP on CloudFlare & send an e-mail with whois report and relevant log lines
# to the destemail.
action_cf_mwl = cloudflare[cfuser="%(cfemail)s", cftoken="%(cfapikey)s"]
                %(mta)s-whois-lines[name=%(__name__)s, dest="%(destemail)s", logpath=%(logpath)s, chain="%(chain)s"]

# Report block via blocklist.de fail2ban reporting service API
# 
# See the IMPORTANT note in action.d/blocklist_de.conf for when to
# use this action. Create a file jail.d/blocklist_de.local containing
# [Init]
# blocklist_de_apikey = {api key from registration]
#
action_blocklist_de  = blocklist_de[email="%(sender)s", service=%(filter)s, apikey="%(blocklist_de_apikey)s"]

# Report ban via badips.com, and use as blacklist
#
# See BadIPsAction docstring in config/action.d/badips.py for
# documentation for this action.
#
# NOTE: This action relies on banaction being present on start and therefore
# should be last action defined for a jail.
#
action_badips = badips.py[category="%(name)s", banaction="%(banaction)s"]

# Choose default action.  To change, just override value of 'action' with the
# interpolation to the chosen action shortcut (e.g.  action_mw, action_mwl, etc) in jail.local
# globally (section [DEFAULT]) or per specific section
action = %(<%= scope['::fail2ban::action'] %>)s


#
# JAILS
#

#
# SSH servers
#

[sshd]

enabled = <%= scope['::fail2ban::jails'].include? "ssh" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('ssh') ? scope['::fail2ban::jail_ports']['ssh'] : 'ssh' %>
logpath = %(sshd_log)s
maxretry = 6


[sshd-ddos]
# This jail corresponds to the standard configuration in Fail2ban.
# The mail-whois action send a notification e-mail with a whois request
# in the body.
enabled = <%= scope['::fail2ban::jails'].include? "ssh-ddos" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('ssh-ddos') ? scope['::fail2ban::jail_ports']['ssh-ddos'] : 'ssh' %>
logpath = %(sshd_log)s
maxretry = 6


[dropbear]

enabled  = <%= scope['::fail2ban::jails'].include? "dropbear" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('dropbear') ? scope['::fail2ban::jail_ports']['dropbear'] : 'ssh' %>
logpath  = %(dropbear_log)s
maxretry = 6


[selinux-ssh]

enabled  = <%= scope['::fail2ban::jails'].include? "selinux-ssh" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('selinux-ssh') ? scope['::fail2ban::jail_ports']['selinux-ssh'] : 'ssh' %>
logpath  = %(auditd_log)s
maxretry = 5


#
# HTTP servers
#

[apache-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-auth" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-auth') ? scope['::fail2ban::jail_ports']['apache-auth'] : 'http,https' %>
logpath  = %(apache_error_log)s
maxretry = 6


[apache-badbots]
# Ban hosts which agent identifies spammer robots crawling the web
# for email addresses. The mail outputs are buffered.
enabled  = <%= scope['::fail2ban::jails'].include? "apache-badbots" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-badbots') ? scope['::fail2ban::jail_ports']['apache-badbots'] : 'http,https' %>
logpath  = %(apache_access_log)s
bantime  = 172800
maxretry = 1


[apache-noscript]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-noscript" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-noscript') ? scope['::fail2ban::jail_ports']['apache-noscript'] : 'http,https' %>
logpath  = %(apache_error_log)s
maxretry = 6


[apache-overflows]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-overflows" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-overflows') ? scope['::fail2ban::jail_ports']['apache-overflows'] : 'http,https' %>
logpath  = %(apache_error_log)s
maxretry = 2


[apache-nohome]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-nohome" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-nohome') ? scope['::fail2ban::jail_ports']['apache-nohome'] : 'http,https' %>
logpath  = %(apache_error_log)s
maxretry = 2


[apache-botsearch]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-botsearch" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-botsearch') ? scope['::fail2ban::jail_ports']['apache-botsearch'] : 'http,https' %>
logpath  = %(apache_error_log)s
maxretry = 2


[apache-fakegooglebot]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-fakegooglebot" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-fakegooglebot') ? scope['::fail2ban::jail_ports']['apache-fakegooglebot'] : 'http,https' %>
logpath  = %(apache_access_log)s
maxretry = 1
ignorecommand = %(ignorecommands_dir)s/apache-fakegooglebot <ip>


[apache-modsecurity]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-modsecurity" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-modsecurity') ? scope['::fail2ban::jail_ports']['apache-modsecurity'] : 'http,https' %>
logpath  = %(apache_error_log)s
maxretry = 2

[apache-shellshock]

enabled  = <%= scope['::fail2ban::jails'].include? "apache-shellshock" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('apache-shellshock') ? scope['::fail2ban::jail_ports']['apache-shellshock'] : 'http,https' %>
logpath = %(apache_error_log)s
maxretry = 1

[nginx-http-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "nginx-http-auth" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('nginx-http-auth') ? scope['::fail2ban::jail_ports']['nginx-http-auth'] : 'http,https' %>
logpath = %(nginx_error_log)s

[nginx-botsearch]

enabled  = <%= scope['::fail2ban::jails'].include? "nginx-botsearch" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('nginx-botsearch') ? scope['::fail2ban::jail_ports']['nginx-botsearch'] : 'http,https' %>
logpath  = %(nginx_error_log)s
maxretry = 2

# Ban attackers that try to use PHP's URL-fopen() functionality
# through GET/POST variables. - Experimental, with more than a year
# of usage in production environments.

[php-url-fopen]

enabled = <%= scope['::fail2ban::jails'].include? "php-url-fopen" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('php-url-fopen') ? scope['::fail2ban::jail_ports']['php-url-fopen'] : 'http,https' %>
logpath = %(nginx_access_log)s
          %(apache_access_log)s


[suhosin]

enabled = <%= scope['::fail2ban::jails'].include? "suhosin" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('suhosin') ? scope['::fail2ban::jail_ports']['suhosin'] : 'http,https' %>
logpath = %(suhosin_log)s


[lighttpd-auth]
# Same as above for Apache's mod_auth
# It catches wrong authentifications
enabled = <%= scope['::fail2ban::jails'].include? "lighttpd-auth" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('lighttpd-auth') ? scope['::fail2ban::jail_ports']['lighttpd-auth'] : 'http,https' %>
logpath = %(lighttpd_error_log)s


#
# Webmail and groupware servers
#

[roundcube-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "roundcube-auth" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('roundcube-auth') ? scope['::fail2ban::jail_ports']['roundcube-auth'] : 'http,https' %>
logpath  = %(roundcube_errors_log)s


[openwebmail]

enabled  = <%= scope['::fail2ban::jails'].include? "openwebmail" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('openwebmail') ? scope['::fail2ban::jail_ports']['openwebmail'] : 'http,https' %>
logpath  = /var/log/openwebmail.log


[horde]

enabled  = <%= scope['::fail2ban::jails'].include? "horde" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('horde') ? scope['::fail2ban::jail_ports']['horde'] : 'http,https' %>
logpath  = /var/log/horde/horde.log


[groupoffice]

enabled  = <%= scope['::fail2ban::jails'].include? "groupoffice" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('groupoffice') ? scope['::fail2ban::jail_ports']['groupoffice'] : 'http,https' %>
logpath  = /home/groupoffice/log/info.log


[sogo-auth]
# Monitor SOGo groupware server
enabled  = <%= scope['::fail2ban::jails'].include? "sogo-auth" %>
# without proxy this would be:
# port    = 20000
port     = <%= scope['::fail2ban::jail_ports'].key?('sogo-auth') ? scope['::fail2ban::jail_ports']['sogo-auth'] : 'http,https' %>
logpath  = /var/log/sogo/sogo.log


[tine20]

enabled  = <%= scope['::fail2ban::jails'].include? "tine20" %>
logpath  = /var/log/tine20/tine20.log
port     = <%= scope['::fail2ban::jail_ports'].key?('tine20') ? scope['::fail2ban::jail_ports']['tine20'] : 'http,https' %>
maxretry = 5


#
# Web Applications
#
#

[drupal-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "drupal-auth" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('drupal-auth') ? scope['::fail2ban::jail_ports']['drupal-auth'] : 'http,https' %>
logpath  = %(syslog_daemon)s

[guacamole]

enabled  = <%= scope['::fail2ban::jails'].include? "guacamole" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('guacamole') ? scope['::fail2ban::jail_ports']['guacamole'] : 'http,https' %>
logpath  = /var/log/tomcat*/catalina.out

[monit]
#Ban clients brute-forcing the monit gui login
enabled  = <%= scope['::fail2ban::jails'].include? "monit" %>
filter   = monit
port = <%= scope['::fail2ban::jail_ports'].key?('monit') ? scope['::fail2ban::jail_ports']['monit'] : '2812' %>
logpath  = /var/log/monit


[webmin-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "webmin-auth" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('webmin-auth') ? scope['::fail2ban::jail_ports']['webmin-auth'] : '10000' %>
logpath = %(syslog_authpriv)s


[froxlor-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "froxlor-auth" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('froxlor-auth') ? scope['::fail2ban::jail_ports']['froxlor-auth'] : 'http,https' %>
logpath  = %(syslog_authpriv)s


#
# HTTP Proxy servers
#
#

[squid]

enabled  = <%= scope['::fail2ban::jails'].include? "squid" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('squid') ? scope['::fail2ban::jail_ports']['squid'] : '80,443,3128,8080' %>
logpath = /var/log/squid/access.log


[3proxy]

enabled  = <%= scope['::fail2ban::jails'].include? "3proxy" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('3proxy') ? scope['::fail2ban::jail_ports']['3proxy'] : '3128' %>
logpath = /var/log/3proxy.log


#
# FTP servers
#


[proftpd]

enabled  = <%= scope['::fail2ban::jails'].include? "proftpd" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('proftpd') ? scope['::fail2ban::jail_ports']['proftpd'] : 'ftp,ftp-data,ftps,ftps-data' %>
logpath  = %(proftpd_log)s
maxretry = 6


[pure-ftpd]

enabled  = <%= scope['::fail2ban::jails'].include? "pure-ftpd" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('pure-ftpd') ? scope['::fail2ban::jail_ports']['pure-ftpd'] : 'ftp,ftp-data,ftps,ftps-data' %>
logpath  = %(pureftpd_log)s
maxretry = 6


[gssftpd]

enabled  = <%= scope['::fail2ban::jails'].include? "gssftpd" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('gssftpd') ? scope['::fail2ban::jail_ports']['gssftpd'] : 'ftp,ftp-data,ftps,ftps-data' %>
logpath  = %(syslog_daemon)s
maxretry = 6


[wuftpd]

enabled  = <%= scope['::fail2ban::jails'].include? "wuftpd" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('wuftpd') ? scope['::fail2ban::jail_ports']['wuftpd'] : 'ftp,ftp-data,ftps,ftps-data' %>
logpath  = %(wuftpd_log)s
maxretry = 6


[vsftpd]
# or overwrite it in jails.local to be
# logpath = %(syslog_authpriv)s
# if you want to rely on PAM failed login attempts
# vsftpd's failregex should match both of those formats
enabled  = <%= scope['::fail2ban::jails'].include? "vsftpd" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('vsftpd') ? scope['::fail2ban::jail_ports']['vsftpd'] : 'ftp,ftp-data,ftps,ftps-data' %>
logpath  = %(vsftpd_log)s
maxretry = 6


#
# Mail servers
#

# ASSP SMTP Proxy Jail
[assp]

enabled  = <%= scope['::fail2ban::jails'].include? "assp" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('assp') ? scope['::fail2ban::jail_ports']['assp'] : 'smtp,465,submission' %>
logpath  = /root/path/to/assp/logs/maillog.txt


[courier-smtp]

enabled  = <%= scope['::fail2ban::jails'].include? "couriersmtp" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('courier-smtp') ? scope['::fail2ban::jail_ports']['courier-smtp'] : 'smtp,465,submission' %>
logpath  = %(syslog_mail)s


[postfix]

enabled  = <%= scope['::fail2ban::jails'].include? "postfix" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('postfix') ? scope['::fail2ban::jail_ports']['postfix'] : 'smtp,465,submission' %>
logpath  = %(postfix_log)s


[postfix-rbl]

enabled  = <%= scope['::fail2ban::jails'].include? "postfix-rbl" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('postfix-rbl') ? scope['::fail2ban::jail_ports']['postfix-rbl'] : 'smtp,465,submission' %>
logpath  = %(syslog_mail)s
maxretry = 1


[sendmail-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "sendmail-auth" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('sendmail-auth') ? scope['::fail2ban::jail_ports']['sendmail-auth'] : 'smtp,465,submission' %>
logpath = %(syslog_mail)s


[sendmail-reject]

enabled  = <%= scope['::fail2ban::jails'].include? "sendmail-reject" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('sendmail-reject') ? scope['::fail2ban::jail_ports']['sendmail-reject'] : 'smtp,465,submission' %>
logpath  = %(syslog_mail)s


[qmail-rbl]

enabled  = <%= scope['::fail2ban::jails'].include? "qmail-rbl" %>
filter  = qmail
port    = <%= scope['::fail2ban::jail_ports'].key?('qmail-rbl') ? scope['::fail2ban::jail_ports']['qmail-rbl'] : 'smtp,465,submission' %>
logpath = /service/qmail/log/main/current


# dovecot defaults to logging to the mail syslog facility
# but can be set by syslog_facility in the dovecot configuration.
[dovecot]

enabled = <%= scope['::fail2ban::jails'].include? "dovecot" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('dovecot') ? scope['::fail2ban::jail_ports']['dovecot'] : 'pop3,pop3s,imap,imaps,submission,465,sieve' %>
logpath = %(dovecot_log)s


[sieve]

enabled = <%= scope['::fail2ban::jails'].include? "sieve" %>
port   = <%= scope['::fail2ban::jail_ports'].key?('sieve') ? scope['::fail2ban::jail_ports']['sieve'] : 'smtp,465,submission' %>
logpath = %(dovecot_log)s


[solid-pop3d]

enabled = <%= scope['::fail2ban::jails'].include? "solid-pop3d" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('solid-pop3d') ? scope['::fail2ban::jail_ports']['solid-pop3d'] : 'pop3,pop3s' %>
logpath = %(solidpop3d_log)s


[exim]

enabled = <%= scope['::fail2ban::jails'].include? "exim" %>
port   = <%= scope['::fail2ban::jail_ports'].key?('exim') ? scope['::fail2ban::jail_ports']['exim'] : 'smtp,465,submission' %>
logpath = %(exim_main_log)s


[exim-spam]

enabled = <%= scope['::fail2ban::jails'].include? "exim-spam" %>
port   = <%= scope['::fail2ban::jail_ports'].key?('exim-spam') ? scope['::fail2ban::jail_ports']['exim-spam'] : 'smtp,465,submission' %>
logpath = %(exim_main_log)s


[kerio]

enabled = <%= scope['::fail2ban::jails'].include? "kerio" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('kerio') ? scope['::fail2ban::jail_ports']['kerio'] : 'imap,smtp,imaps,465' %>
logpath = /opt/kerio/mailserver/store/logs/security.log


#
# Mail servers authenticators: might be used for smtp,ftp,imap servers, so
# all relevant ports get banned
#

[courier-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "courierauth" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('courier-auth') ? scope['::fail2ban::jail_ports']['courier-auth'] : 'smtp,465,submission,imap3,imaps,pop3,pop3s' %>
logpath  = %(syslog_mail)s


[postfix-sasl]

enabled  = <%= scope['::fail2ban::jails'].include? "sasl" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('postfix-sasl') ? scope['::fail2ban::jail_ports']['postfix-sasl'] : 'smtp,465,submission,imap3,imaps,pop3,pop3s' %>
# You might consider monitoring /var/log/mail.warn instead if you are
# running postfix since it would provide the same log lines at the
# "warn" level but overall at the smaller filesize.
logpath  = %(postfix_log)s


[perdition]

enabled  = <%= scope['::fail2ban::jails'].include? "perdition" %>
port   = <%= scope['::fail2ban::jail_ports'].key?('perdition') ? scope['::fail2ban::jail_ports']['perdition'] : 'imap3,imaps,pop3,pop3s' %>
logpath = %(syslog_mail)s


[squirrelmail]

enabled  = <%= scope['::fail2ban::jails'].include? "squirrelmail" %>
port = <%= scope['::fail2ban::jail_ports'].key?('squirrelmail') ? scope['::fail2ban::jail_ports']['squirrelmail'] : 'smtp,465,submission,imap2,imap3,imaps,pop3,pop3s,http,https,socks' %>
logpath = /var/lib/squirrelmail/prefs/squirrelmail_access_log


[cyrus-imap]

enabled  = <%= scope['::fail2ban::jails'].include? "cyrus-imap" %>
port   = <%= scope['::fail2ban::jail_ports'].key?('cyrus-imap') ? scope['::fail2ban::jail_ports']['cyrus-imap'] : 'imap3,imaps' %>
logpath = %(syslog_mail)s


[uwimap-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "uwimap-auth" %>
port   = <%= scope['::fail2ban::jail_ports'].key?('uwimap-auth') ? scope['::fail2ban::jail_ports']['uwimap-auth'] : 'imap3,imaps' %>
logpath = %(syslog_mail)s


#
#
# DNS servers
#


# !!! WARNING !!!
#   Since UDP is connection-less protocol, spoofing of IP and imitation
#   of illegal actions is way too simple.  Thus enabling of this filter
#   might provide an easy way for implementing a DoS against a chosen
#   victim. See
#    http://nion.modprobe.de/blog/archives/690-fail2ban-+-dns-fail.html
#   Please DO NOT USE this jail unless you know what you are doing.
#
# IMPORTANT: see filter.d/named-refused for instructions to enable logging
# This jail blocks UDP traffic for DNS requests.
# [named-refused-udp]
#
# filter   = named-refused
# port     = domain,953
# protocol = udp
# logpath  = /var/log/named/security.log

# IMPORTANT: see filter.d/named-refused for instructions to enable logging
# This jail blocks TCP traffic for DNS requests.

[named-refused]

enabled  = <%= scope['::fail2ban::jails'].include? "named-refused" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('named-refused') ? scope['::fail2ban::jail_ports']['named-refused'] : 'domain,953' %>
logpath  = /var/log/named/security.log


[nsd]

enabled  = <%= scope['::fail2ban::jails'].include? "nsd" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('nsd') ? scope['::fail2ban::jail_ports']['nsd'] : '53' %>
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
logpath = /var/log/nsd.log


#
# Miscellaneous
#

[asterisk]

enabled  = <%= scope['::fail2ban::jails'].include? "asterisk" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('asterisk') ? scope['::fail2ban::jail_ports']['asterisk'] : '5060,5061' %>
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
logpath  = /var/log/asterisk/messages
maxretry = 10


[freeswitch]

enabled  = <%= scope['::fail2ban::jails'].include? "freeswitch" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('freeswitch') ? scope['::fail2ban::jail_ports']['freeswitch'] : '5060,5061' %>
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
logpath  = /var/log/freeswitch.log
maxretry = 10


# To log wrong MySQL access attempts add to /etc/my.cnf in [mysqld] or
# equivalent section:
# log-warning = 2
#
# for syslog (daemon facility)
# [mysqld_safe]
# syslog
#
# for own logfile
# [mysqld]
# log-error=/var/log/mysqld.log
[mysqld-auth]

enabled  = <%= scope['::fail2ban::jails'].include? "mysqld-auth" %>
port     = <%= scope['::fail2ban::jail_ports'].key?('mysqld-auth') ? scope['::fail2ban::jail_ports']['mysqld-auth'] : '3306' %>
logpath  = %(mysql_log)s
maxretry = 5


# Jail for more extended banning of persistent abusers
# !!! WARNINGS !!!
# 1. Make sure that your loglevel specified in fail2ban.conf/.local
#    is not at DEBUG level -- which might then cause fail2ban to fall into
#    an infinite loop constantly feeding itself with non-informative lines
# 2. Increase dbpurgeage defined in fail2ban.conf to e.g. 648000 (7.5 days)
#    to maintain entries for failed logins for sufficient amount of time
[recidive]

enabled  = <%= scope['::fail2ban::jails'].include? "recidive" %>
logpath  = /var/log/fail2ban.log
banaction = iptables-allports
bantime  = 604800  ; 1 week
findtime = 86400   ; 1 day
maxretry = 5


# Generic filter for PAM. Has to be used with action which bans all
# ports such as iptables-allports, shorewall

[pam-generic]
# pam-generic filter can be customized to monitor specific subset of 'tty's
enabled  = <%= scope['::fail2ban::jails'].include? "pam-generic" %>
banaction = iptables-allports
logpath  = %(syslog_authpriv)s


[xinetd-fail]

enabled   = <%= scope['::fail2ban::jails'].include? "xinetd-fail" %>
banaction = iptables-multiport-log
logpath   = %(syslog_daemon)s
maxretry  = 2


# stunnel - need to set port for this
[stunnel]

enabled = <%= scope['::fail2ban::jails'].include? "stunnel" %>
logpath = /var/log/stunnel4/stunnel.log


[ejabberd-auth]

enabled = <%= scope['::fail2ban::jails'].include? "ejabberd-auth" %>
port    = <%= scope['::fail2ban::jail_ports'].key?('ejabberd-auth') ? scope['::fail2ban::jail_ports']['ejabberd-auth'] : '5222' %>
logpath = /var/log/ejabberd/ejabberd.log


[counter-strike]

enabled = <%= scope['::fail2ban::jails'].include? "counter-strike" %>
logpath = /opt/cstrike/logs/L[0-9]*.log
# Firewall: http://www.cstrike-planet.com/faq/6
# CAUTION: variable jail_ports would only ban TCP ports
tcpport = <%= scope['::fail2ban::jail_ports'].key?('counter-strike') ? scope['::fail2ban::jail_ports']['counter-strike'] : '27030,27031,27032,27033,27034,27035,27036,27037,27038,27039' %>
udpport = 1200,27000,27001,27002,27003,27004,27005,27006,27007,27008,27009,27010,27011,27012,27013,27014,27015
action  = %(banaction)s[name=%(__name__)s-tcp, port="%(tcpport)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(udpport)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]

# consider low maxretry and a long bantime
# nobody except your own Nagios server should ever probe nrpe
[nagios]

enabled  = <%= scope['::fail2ban::jails'].include? "nagios" %>
logpath  = %(syslog_daemon)s     ; nrpe.cfg may define a different log_facility
maxretry = 1


[oracleims]
# see "oracleims" filter file for configuration requirement for Oracle IMS v6 and above
enabled = <%= scope['::fail2ban::jails'].include? "oracleims" %>
logpath = /opt/sun/comms/messaging64/log/mail.log_current
maxretry = 6
banaction = iptables-allports

[directadmin]
enabled = <%= scope['::fail2ban::jails'].include? "directadmin" %>
logpath = /var/log/directadmin/login.log
port = <%= scope['::fail2ban::jail_ports'].key?('directadmin') ? scope['::fail2ban::jail_ports']['directadmin'] : '2222' %>

[portsentry]
enabled  = <%= scope['::fail2ban::jails'].include? "portsentry" %>
logpath  = /var/lib/portsentry/portsentry.history
maxretry = 1

[pass2allow-ftp]
# this pass2allow example allows FTP traffic after successful HTTP authentication
enabled  = <%= scope['::fail2ban::jails'].include? "pass2allow-ftp" %>
port         = <%= scope['::fail2ban::jail_ports'].key?('pass2allow-ftp') ? scope['::fail2ban::jail_ports']['pass2allow-ftp'] : 'ftp,ftp-data,ftps,ftps-data' %>
# knocking_url variable must be overridden to some secret value in filter.d/apache-pass.local
filter       = apache-pass
# access log of the website with HTTP auth
logpath      = %(apache_access_log)s
blocktype    = RETURN
returntype   = DROP
bantime      = 3600
maxretry     = 1
findtime     = 1
